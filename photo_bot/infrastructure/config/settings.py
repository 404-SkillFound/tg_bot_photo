"""–ú–û–î–£–õ–¨ –ù–ê–°–¢–†–û–ï–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø.

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""

from typing import List, Optional

from dotenv import load_dotenv
from pydantic import Field, validator
from pydantic_settings import BaseSettings

load_dotenv()


class Settings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    # ==================== üîê API –ö–õ–Æ–ß–ò –ò –¢–û–ö–ï–ù–´ ====================
    TELEGRAM_BOT_TOKEN: str = Field(
        default=...,
        description='–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ Telegram',
        example='1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi',
    )

    PHOTOROOM_API_KEY: str = Field(
        default=...,
        description='API –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ Photoroom',
        example='photoroom_apikey_1234567890abcdef',
    )
    SECRET_TOKEN: str = Field(
        default='my_secret_token_123',
        description='–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–æ–≤',
        example='my_super_secret_token_2025',
    )

    # ==================== üåê –°–ï–†–í–ï–† –ò –°–ï–¢–¨ =========================
    HOST: str = Field(
        default='127.0.0.1',
        description='–•–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        example='0.0.0.0 –∏–ª–∏ 127.0.0.1',
    )
    PORT: int = Field(
        default=8000,
        description='–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        ge=1000, le=65535,  # –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø–æ—Ä—Ç –æ—Ç 1000 –¥–æ 65535
    )
    WEBHOOK_URL: Optional[str] = Field(
        default=None,
        description='URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Telegram (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)',
        example='https://yourdomain.com',
    )

    # ==================== üñºÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =================
    MAX_IMAGE_SIZE_MB: int = Field(
        default=10,
        description='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ú–ë',
        ge=1, le=50,  # –û—Ç 1 –¥–æ 50 –ú–ë
    )
    DEFAULT_IMAGE_QUALITY: int = Field(
        default=85,
        description='–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0-100)',
        ge=1, le=100,
    )
    SUPPORTED_FORMATS: List[str] = Field(
        default=['JPEG', 'PNG', 'WEBP'],
        description='–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    )

    # ==================== ‚è±Ô∏è –¢–ê–ô–ú–ê–£–¢–´ –ò –õ–ò–ú–ò–¢–´ =====================
    REQUEST_TIMEOUT: int = Field(
        default=30,
        description='–¢–∞–π–º–∞—É—Ç HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
        ge=5, le=120,
    )
    SESSION_TTL: int = Field(
        default=3600,
        description='–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)',
        ge=300, le=86400,  # –û—Ç 5 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤
    )
    RATE_LIMIT_PER_MINUTE: int = Field(
        default=20,
        description='–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        ge=1, le=1000,
    )

    # ==================== üé® –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò ===================
    ENABLE_PHOTOROOM: bool = Field(
        default=True,
        description='–í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Photoroom API',
    )

    ENABLE_PILLOW: bool = Field(
        default=True,
        description='–í–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Pillow',
    )
    DEFAULT_PROCESSOR: str = Field(
        default='photoroom',
        description='–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
        pattern='^(photoroom|pillow)$',
    )

    # ==================== üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===========================
    LOG_LEVEL: str = Field(
        default='INFO',
        description='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
        pattern='^(DEBUG|INFO|WARNING|ERROR|CRITICAL)$',
    )
    ENABLE_FILE_LOGGING: bool = Field(
        default=True,
        description='–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª',
    )

    # ==================== üîß –í–ê–õ–ò–î–ê–¢–û–†–´ ============================

    @validator('TELEGRAM_BOT_TOKEN')
    def validate_telegram_token(
            cls, v: Optional[str],  # noqa: N805
    ) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞."""
        if not v or v == 'your_telegram_bot_token_here':
            raise ValueError(
                '‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. '
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª',
            )
        if ':' not in v or len(v) < 30:
            raise ValueError('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN')
        return v

    @validator('PHOTOROOM_API_KEY')
    def validate_photoroom_key(
            cls, v: Optional[str],  # noqa: N805
    ) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞ Photoroom API."""
        if not v or v == 'your_photoroom_api_key_here':
            raise ValueError(
                '‚ùå PHOTOROOM_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. '
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª',
            )
        return v

    @validator('WEBHOOK_URL')
    def validate_webhook_url(
            cls, v: Optional[str],  # noqa: N805
    ) -> str | None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è URL –≤–µ–±—Ö—É–∫–∞."""
        if v and v.startswith('https://yourdomain'):
            return None  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑ .env.example
        return v

    @validator('DEFAULT_PROCESSOR')
    def validate_default_processor(
            cls, v: Optional[str], values: dict[str, bool],  # noqa: N805
    ) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        if v == 'photoroom' and not values.get(
                'ENABLE_PHOTOROOM',
                True,
        ):
            raise ValueError(
                '‚ùå Photoroom –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ –≤—ã–±—Ä–∞–Ω '
                '–∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
            )
        if v == 'pillow' and not values.get('ENABLE_PILLOW', True):
            raise ValueError(
                '‚ùå Pillow –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ –≤—ã–±—Ä–∞–Ω '
                '–∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
            )
        return v

    # ==================== üéØ –°–í–û–ô–°–¢–í–ê –î–õ–Ø –£–î–û–ë–°–¢–í–ê =================
    @property
    def is_development(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."""
        return self.HOST in [
            '127.0.0.1',
            'localhost',
        ] or self.PORT in [8000, 8080]

    @property
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º."""
        return (self.WEBHOOK_URL is not None and
                not self.is_development)

    @property
    def max_image_size_bytes(self) -> int:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö."""
        return self.MAX_IMAGE_SIZE_MB * 1024 * 1024

    @property
    def webhook_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –≤–µ–±—Ö—É–∫–∏."""
        return self.WEBHOOK_URL is not None and self.is_production

    class Config:
        """‚öô–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Pydantic."""

        env_file = '.env'
        env_file_encoding = 'utf-8'
        case_sensitive = False
        use_enum_values = True


# ==================== üéØ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ò –§–£–ù–ö–¶–ò–ò ============
_settings_instance: Optional[Settings] = None


def get_settings() -> Settings:
    """–ü–û–õ–£–ß–ï–ù–ò–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê –ù–ê–°–¢–†–û–ï–ö.

    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    """
    global _settings_instance

    if _settings_instance is None:
        try:
            _settings_instance = Settings()

            settings_instance = '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' \
                if _settings_instance.TELEGRAM_BOT_TOKEN else '‚ùå –ù–µ—Ç'
            photo_api = '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' \
                if _settings_instance.PHOTOROOM_API_KEY else '‚ùå –ù–µ—Ç'
            webhook = '‚úÖ ' + _settings_instance.WEBHOOK_URL \
                if _settings_instance.WEBHOOK_URL else '‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º'

            print('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
            print(f'\tüåê Host: {_settings_instance.HOST}')
            print(f'\tüö™ Port: {_settings_instance.PORT}')
            print(f'\tü§ñ Telegram Bot: {settings_instance}')
            print(f'\tüé® Photoroom API: {photo_api}')
            print(f'\tüåê Webhook: {webhook}')

        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}')
            print('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
            raise

    return _settings_instance


def reload_settings() -> Settings:
    """–ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö.

    –ü–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã.
    """
    global _settings_instance
    _settings_instance = None
    return get_settings()


# ==================== üß™ –¢–ï–°–¢–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ========================

class TestSettings(Settings):
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ —Ç–µ—Å—Ç–µ."""

    class Config:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""

        env_file = '.env.test'
        env_file_encoding = 'utf-8'


def get_test_settings() -> Settings:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return TestSettings()
